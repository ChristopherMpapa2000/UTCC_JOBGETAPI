#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JobGetApiUTCC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WolfApproveCore.UTCC")]
	public partial class DataconDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssetData(AssetData instance);
    partial void UpdateAssetData(AssetData instance);
    partial void DeleteAssetData(AssetData instance);
    #endregion
		
		public DataconDataContext() : 
				base(global::JobGetApiUTCC.Properties.Settings.Default.WolfApproveCore_UTCCConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataconDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataconDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataconDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataconDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssetData> AssetDatas
		{
			get
			{
				return this.GetTable<AssetData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssetData")]
	public partial class AssetData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _row_Id;
		
		private string _asset_no;
		
		private string _asset_desc1;
		
		private string _asset_desc2;
		
		private string _class_no;
		
		private string _inventory_no;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrow_IdChanging(int value);
    partial void Onrow_IdChanged();
    partial void Onasset_noChanging(string value);
    partial void Onasset_noChanged();
    partial void Onasset_desc1Changing(string value);
    partial void Onasset_desc1Changed();
    partial void Onasset_desc2Changing(string value);
    partial void Onasset_desc2Changed();
    partial void Onclass_noChanging(string value);
    partial void Onclass_noChanged();
    partial void Oninventory_noChanging(string value);
    partial void Oninventory_noChanged();
    #endregion
		
		public AssetData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_row_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int row_Id
		{
			get
			{
				return this._row_Id;
			}
			set
			{
				if ((this._row_Id != value))
				{
					this.Onrow_IdChanging(value);
					this.SendPropertyChanging();
					this._row_Id = value;
					this.SendPropertyChanged("row_Id");
					this.Onrow_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_no", DbType="NVarChar(50)")]
		public string asset_no
		{
			get
			{
				return this._asset_no;
			}
			set
			{
				if ((this._asset_no != value))
				{
					this.Onasset_noChanging(value);
					this.SendPropertyChanging();
					this._asset_no = value;
					this.SendPropertyChanged("asset_no");
					this.Onasset_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_desc1", DbType="NVarChar(MAX)")]
		public string asset_desc1
		{
			get
			{
				return this._asset_desc1;
			}
			set
			{
				if ((this._asset_desc1 != value))
				{
					this.Onasset_desc1Changing(value);
					this.SendPropertyChanging();
					this._asset_desc1 = value;
					this.SendPropertyChanged("asset_desc1");
					this.Onasset_desc1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_desc2", DbType="NVarChar(MAX)")]
		public string asset_desc2
		{
			get
			{
				return this._asset_desc2;
			}
			set
			{
				if ((this._asset_desc2 != value))
				{
					this.Onasset_desc2Changing(value);
					this.SendPropertyChanging();
					this._asset_desc2 = value;
					this.SendPropertyChanged("asset_desc2");
					this.Onasset_desc2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_no", DbType="NVarChar(MAX)")]
		public string class_no
		{
			get
			{
				return this._class_no;
			}
			set
			{
				if ((this._class_no != value))
				{
					this.Onclass_noChanging(value);
					this.SendPropertyChanging();
					this._class_no = value;
					this.SendPropertyChanged("class_no");
					this.Onclass_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inventory_no", DbType="NVarChar(MAX)")]
		public string inventory_no
		{
			get
			{
				return this._inventory_no;
			}
			set
			{
				if ((this._inventory_no != value))
				{
					this.Oninventory_noChanging(value);
					this.SendPropertyChanging();
					this._inventory_no = value;
					this.SendPropertyChanged("inventory_no");
					this.Oninventory_noChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
